// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model News {
  id        String  @id @default(uuid()) @db.Char(36)
  status    String
  title     String
  slug      String  @unique
  content   String  @db.LongText
  thumbnail String?

  // Relasi Ke Upload Image News
  images NewsImage[]

  // Relasi Ke Kategori
  categoryId String   @db.Char(36)
  category   Category @relation(fields: [categoryId], references: [id])

  // Relasi ke Author
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.Char(36)

  createdAt DateTime @default(now())
}

model NewsImage {
  id     String @id @default(uuid()) @db.Char(36)
  url    String
  newsId String @db.Char(36)
  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(uuid()) @db.Char(36)
  name      String   @unique
  slug      String   @unique
  news      News[]
  createdAt DateTime @default(now())
}

model User {
  id            String    @id @default(uuid()) @db.Char(36)
  username      String    @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  // News untuk User
  News News[]
}

model Account {
  id                String  @id @default(uuid()) @db.Char(36)
  userId            String  @db.Char(36)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Char(36)
  sessionToken String   @unique
  userId       String   @db.Char(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
